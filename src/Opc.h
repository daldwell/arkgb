#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "Cpu.h"
#include "Interrupt.h"
#include "Debugger.h"
#include "Mmu.h"
#include "Rom.h"
#include "GUnit.h"

#pragma once

enum Mnemonic
{
    NOP_ = 0x00,
    LD_BC_d16_ = 0x01,
    LD_mem_BC_A_ = 0x02,
    INC_BC_ = 0x03,
    INC_B_ = 0x04,
    DEC_B_ = 0x05,
    LD_B_d8_ = 0x06,
    RLCA_ = 0x07,
    LD_mem_a16_SP_ = 0x08,
    ADD_HL_BC_ = 0x09,
    LD_A_mem_BC_ = 0x0a,
    DEC_BC_ = 0x0b,
    INC_C_ = 0x0c,
    DEC_C_ = 0x0d,
    LD_C_d8_ = 0x0e,
    RRCA_ = 0x0f,
    STOP_0_ = 0x10,
    LD_DE_d16_ = 0x11,
    LD_mem_DE_A_ = 0x12,
    INC_DE_ = 0x13,
    INC_D_ = 0x14,
    DEC_D_ = 0x15,
    LD_D_d8_ = 0x16,
    RLA_ = 0x17,
    JR_r8_ = 0x18,
    ADD_HL_DE_ = 0x19,
    LD_A_mem_DE_ = 0x1a,
    DEC_DE_ = 0x1b,
    INC_E_ = 0x1c,
    DEC_E_ = 0x1d,
    LD_E_d8_ = 0x1e,
    RRA_ = 0x1f,
    JR_NZ_r8_ = 0x20,
    LD_HL_d16_ = 0x21,
    LD_mem_HL_plus_A_ = 0x22,
    INC_HL_ = 0x23,
    INC_H_ = 0x24,
    DEC_H_ = 0x25,
    LD_H_d8_ = 0x26,
    DAA_ = 0x27,
    JR_Z_r8_ = 0x28,
    ADD_HL_HL_ = 0x29,
    LD_A_mem_HL_plus_ = 0x2a,
    DEC_HL_ = 0x2b,
    INC_L_ = 0x2c,
    DEC_L_ = 0x2d,
    LD_L_d8_ = 0x2e,
    CPL_ = 0x2f,
    JR_NC_r8_ = 0x30,
    LD_SP_d16_ = 0x31,
    LD_mem_HL_minus_A_ = 0x32,
    INC_SP_ = 0x33,
    INC_mem_HL_ = 0x34,
    DEC_mem_HL_ = 0x35,
    LD_mem_HL_d8_ = 0x36,
    SCF_ = 0x37,
    JR_C_r8_ = 0x38,
    ADD_HL_SP_ = 0x39,
    LD_A_mem_HL_minus_ = 0x3a,
    DEC_SP_ = 0x3b,
    INC_A_ = 0x3c,
    DEC_A_ = 0x3d,
    LD_A_d8_ = 0x3e,
    CCF_ = 0x3f,
    LD_B_B_ = 0x40,
    LD_B_C_ = 0x41,
    LD_B_D_ = 0x42,
    LD_B_E_ = 0x43,
    LD_B_H_ = 0x44,
    LD_B_L_ = 0x45,
    LD_B_mem_HL_ = 0x46,
    LD_B_A_ = 0x47,
    LD_C_B_ = 0x48,
    LD_C_C_ = 0x49,
    LD_C_D_ = 0x4a,
    LD_C_E_ = 0x4b,
    LD_C_H_ = 0x4c,
    LD_C_L_ = 0x4d,
    LD_C_mem_HL_ = 0x4e,
    LD_C_A_ = 0x4f,
    LD_D_B_ = 0x50,
    LD_D_C_ = 0x51,
    LD_D_D_ = 0x52,
    LD_D_E_ = 0x53,
    LD_D_H_ = 0x54,
    LD_D_L_ = 0x55,
    LD_D_mem_HL_ = 0x56,
    LD_D_A_ = 0x57,
    LD_E_B_ = 0x58,
    LD_E_C_ = 0x59,
    LD_E_D_ = 0x5a,
    LD_E_E_ = 0x5b,
    LD_E_H_ = 0x5c,
    LD_E_L_ = 0x5d,
    LD_E_mem_HL_ = 0x5e,
    LD_E_A_ = 0x5f,
    LD_H_B_ = 0x60,
    LD_H_C_ = 0x61,
    LD_H_D_ = 0x62,
    LD_H_E_ = 0x63,
    LD_H_H_ = 0x64,
    LD_H_L_ = 0x65,
    LD_H_mem_HL_ = 0x66,
    LD_H_A_ = 0x67,
    LD_L_B_ = 0x68,
    LD_L_C_ = 0x69,
    LD_L_D_ = 0x6a,
    LD_L_E_ = 0x6b,
    LD_L_H_ = 0x6c,
    LD_L_L_ = 0x6d,
    LD_L_mem_HL_ = 0x6e,
    LD_L_A_ = 0x6f,
    LD_mem_HL_B_ = 0x70,
    LD_mem_HL_C_ = 0x71,
    LD_mem_HL_D_ = 0x72,
    LD_mem_HL_E_ = 0x73,
    LD_mem_HL_H_ = 0x74,
    LD_mem_HL_L_ = 0x75,
    HALT_ = 0x76,
    LD_mem_HL_A_ = 0x77,
    LD_A_B_ = 0x78,
    LD_A_C_ = 0x79,
    LD_A_D_ = 0x7a,
    LD_A_E_ = 0x7b,
    LD_A_H_ = 0x7c,
    LD_A_L_ = 0x7d,
    LD_A_mem_HL_ = 0x7e,
    LD_A_A_ = 0x7f,
    ADD_A_B_ = 0x80,
    ADD_A_C_ = 0x81,
    ADD_A_D_ = 0x82,
    ADD_A_E_ = 0x83,
    ADD_A_H_ = 0x84,
    ADD_A_L_ = 0x85,
    ADD_A_mem_HL_ = 0x86,
    ADD_A_A_ = 0x87,
    ADC_A_B_ = 0x88,
    ADC_A_C_ = 0x89,
    ADC_A_D_ = 0x8a,
    ADC_A_E_ = 0x8b,
    ADC_A_H_ = 0x8c,
    ADC_A_L_ = 0x8d,
    ADC_A_mem_HL_ = 0x8e,
    ADC_A_A_ = 0x8f,
    SUB_B_ = 0x90,
    SUB_C_ = 0x91,
    SUB_D_ = 0x92,
    SUB_E_ = 0x93,
    SUB_H_ = 0x94,
    SUB_L_ = 0x95,
    SUB_mem_HL_ = 0x96,
    SUB_A_ = 0x97,
    SBC_A_B_ = 0x98,
    SBC_A_C_ = 0x99,
    SBC_A_D_ = 0x9a,
    SBC_A_E_ = 0x9b,
    SBC_A_H_ = 0x9c,
    SBC_A_L_ = 0x9d,
    SBC_A_mem_HL_ = 0x9e,
    SBC_A_A_ = 0x9f,
    AND_B_ = 0xa0,
    AND_C_ = 0xa1,
    AND_D_ = 0xa2,
    AND_E_ = 0xa3,
    AND_H_ = 0xa4,
    AND_L_ = 0xa5,
    AND_mem_HL_ = 0xa6,
    AND_A_ = 0xa7,
    XOR_B_ = 0xa8,
    XOR_C_ = 0xa9,
    XOR_D_ = 0xaa,
    XOR_E_ = 0xab,
    XOR_H_ = 0xac,
    XOR_L_ = 0xad,
    XOR_mem_HL_ = 0xae,
    XOR_A_ = 0xaf,
    OR_B_ = 0xb0,
    OR_C_ = 0xb1,
    OR_D_ = 0xb2,
    OR_E_ = 0xb3,
    OR_H_ = 0xb4,
    OR_L_ = 0xb5,
    OR_mem_HL_ = 0xb6,
    OR_A_ = 0xb7,
    CP_B_ = 0xb8,
    CP_C_ = 0xb9,
    CP_D_ = 0xba,
    CP_E_ = 0xbb,
    CP_H_ = 0xbc,
    CP_L_ = 0xbd,
    CP_mem_HL_ = 0xbe,
    CP_A_ = 0xbf,
    RET_NZ_ = 0xc0,
    POP_BC_ = 0xc1,
    JP_NZ_a16_ = 0xc2,
    JP_a16_ = 0xc3,
    CALL_NZ_a16_ = 0xc4,
    PUSH_BC_ = 0xc5,
    ADD_A_d8_ = 0xc6,
    RST_00H_ = 0xc7,
    RET_Z_ = 0xc8,
    RET_ = 0xc9,
    JP_Z_a16_ = 0xca,
    PREFIX_CB_ = 0xcb,
    CALL_Z_a16_ = 0xcc,
    CALL_a16_ = 0xcd,
    ADC_A_d8_ = 0xce,
    RST_08H_ = 0xcf,
    RET_NC_ = 0xd0,
    POP_DE_ = 0xd1,
    JP_NC_a16_ = 0xd2,
    CALL_NC_a16_ = 0xd4,
    PUSH_DE_ = 0xd5,
    SUB_d8_ = 0xd6,
    RST_10H_ = 0xd7,
    RET_C_ = 0xd8,
    RETI_ = 0xd9,
    JP_C_a16_ = 0xda,
    CALL_C_a16_ = 0xdc,
    SBC_A_d8_ = 0xde,
    RST_18H_ = 0xdf,
    LDH_mem_a8_A_ = 0xe0,
    POP_HL_ = 0xe1,
    LD_mem_C_A_ = 0xe2,
    PUSH_HL_ = 0xe5,
    AND_d8_ = 0xe6,
    RST_20H_ = 0xe7,
    ADD_SP_r8_ = 0xe8,
    JP_mem_HL_ = 0xe9,
    LD_mem_a16_A_ = 0xea,
    XOR_d8_ = 0xee,
    RST_28H_ = 0xef,
    LDH_A_mem_a8_ = 0xf0,
    POP_AF_ = 0xf1,
    LD_A_mem_C_ = 0xf2,
    DI_ = 0xf3,
    PUSH_AF_ = 0xf5,
    OR_d8_ = 0xf6,
    RST_30H_ = 0xf7,
    LD_HL_SP_plusr8_ = 0xf8,
    LD_SP_HL_ = 0xf9,
    LD_A_mem_a16_ = 0xfa,
    EI_ = 0xfb,
    CP_d8_ = 0xfe,
    RST_38H_ = 0xff, 
};

enum MnemonicX
{
    RLC_B_ = 0x00,
    RLC_C_ = 0x01,     
    RLC_D_ = 0x02,     
    RLC_E_ = 0x03,     
    RLC_H_ = 0x04,     
    RLC_L_ = 0x05,     
    RLC_mem_HL_ = 0x06,
    RLC_A_ = 0x07,     
    RRC_B_ = 0x08,     
    RRC_C_ = 0x09,     
    RRC_D_ = 0x0a,     
    RRC_E_ = 0x0b,     
    RRC_H_ = 0x0c,     
    RRC_L_ = 0x0d,     
    RRC_mem_HL_ = 0x0e,
    RRC_A_ = 0x0f,     
    RL_B_ = 0x10,      
    RL_C_ = 0x11,      
    RL_D_ = 0x12,      
    RL_E_ = 0x13,      
    RL_H_ = 0x14,      
    RL_L_ = 0x15,      
    RL_mem_HL_ = 0x16, 
    RL_A_ = 0x17,      
    RR_B_ = 0x18,      
    RR_C_ = 0x19,      
    RR_D_ = 0x1a,      
    RR_E_ = 0x1b,      
    RR_H_ = 0x1c,
    RR_L_ = 0x1d,
    RR_mem_HL_ = 0x1e,
    RR_A_ = 0x1f,
    SLA_B_ = 0x20,
    SLA_C_ = 0x21,
    SLA_D_ = 0x22,
    SLA_E_ = 0x23,
    SLA_H_ = 0x24,
    SLA_L_ = 0x25,
    SLA_mem_HL_ = 0x26,
    SLA_A_ = 0x27,
    SRA_B_ = 0x28,
    SRA_C_ = 0x29,
    SRA_D_ = 0x2a,
    SRA_E_ = 0x2b,
    SRA_H_ = 0x2c,
    SRA_L_ = 0x2d,
    SRA_mem_HL_ = 0x2e,
    SRA_A_ = 0x2f,
    SWAP_B_ = 0x30,
    SWAP_C_ = 0x31,
    SWAP_D_ = 0x32,
    SWAP_E_ = 0x33,
    SWAP_H_ = 0x34,
    SWAP_L_ = 0x35,
    SWAP_mem_HL_ = 0x36,
    SWAP_A_ = 0x37,
    SRL_B_ = 0x38,
    SRL_C_ = 0x39,
    SRL_D_ = 0x3a,
    SRL_E_ = 0x3b,
    SRL_H_ = 0x3c,
    SRL_L_ = 0x3d,
    SRL_mem_HL_ = 0x3e,
    SRL_A_ = 0x3f,
    BIT_0_B_ = 0x40,
    BIT_0_C_ = 0x41,
    BIT_0_D_ = 0x42,
    BIT_0_E_ = 0x43,
    BIT_0_H_ = 0x44,
    BIT_0_L_ = 0x45,
    BIT_0_mem_HL_ = 0x46,
    BIT_0_A_ = 0x47,
    BIT_1_B_ = 0x48,
    BIT_1_C_ = 0x49,
    BIT_1_D_ = 0x4a,
    BIT_1_E_ = 0x4b,
    BIT_1_H_ = 0x4c,
    BIT_1_L_ = 0x4d,
    BIT_1_mem_HL_ = 0x4e,
    BIT_1_A_ = 0x4f,
    BIT_2_B_ = 0x50,
    BIT_2_C_ = 0x51,
    BIT_2_D_ = 0x52,
    BIT_2_E_ = 0x53,
    BIT_2_H_ = 0x54,
    BIT_2_L_ = 0x55,
    BIT_2_mem_HL_ = 0x56,
    BIT_2_A_ = 0x57,
    BIT_3_B_ = 0x58,
    BIT_3_C_ = 0x59,
    BIT_3_D_ = 0x5a,
    BIT_3_E_ = 0x5b,
    BIT_3_H_ = 0x5c,
    BIT_3_L_ = 0x5d,
    BIT_3_mem_HL_ = 0x5e,
    BIT_3_A_ = 0x5f,
    BIT_4_B_ = 0x60,
    BIT_4_C_ = 0x61,
    BIT_4_D_ = 0x62,
    BIT_4_E_ = 0x63,
    BIT_4_H_ = 0x64,
    BIT_4_L_ = 0x65,
    BIT_4_mem_HL_ = 0x66,
    BIT_4_A_ = 0x67,
    BIT_5_B_ = 0x68,
    BIT_5_C_ = 0x69,
    BIT_5_D_ = 0x6a,
    BIT_5_E_ = 0x6b,
    BIT_5_H_ = 0x6c,
    BIT_5_L_ = 0x6d,
    BIT_5_mem_HL_ = 0x6e,
    BIT_5_A_ = 0x6f,
    BIT_6_B_ = 0x70,
    BIT_6_C_ = 0x71,
    BIT_6_D_ = 0x72,
    BIT_6_E_ = 0x73,
    BIT_6_H_ = 0x74,
    BIT_6_L_ = 0x75,
    BIT_6_mem_HL_ = 0x76,
    BIT_6_A_ = 0x77,
    BIT_7_B_ = 0x78,
    BIT_7_C_ = 0x79,
    BIT_7_D_ = 0x7a,
    BIT_7_E_ = 0x7b,
    BIT_7_H_ = 0x7c,
    BIT_7_L_ = 0x7d,
    BIT_7_mem_HL_ = 0x7e,
    BIT_7_A_ = 0x7f,
    RES_0_B_ = 0x80,
    RES_0_C_ = 0x81,
    RES_0_D_ = 0x82,
    RES_0_E_ = 0x83,
    RES_0_H_ = 0x84,
    RES_0_L_ = 0x85,
    RES_0_mem_HL_ = 0x86,
    RES_0_A_ = 0x87,
    RES_1_B_ = 0x88,
    RES_1_C_ = 0x89,
    RES_1_D_ = 0x8a,
    RES_1_E_ = 0x8b,
    RES_1_H_ = 0x8c,
    RES_1_L_ = 0x8d,
    RES_1_mem_HL_ = 0x8e,
    RES_1_A_ = 0x8f,
    RES_2_B_ = 0x90,
    RES_2_C_ = 0x91,
    RES_2_D_ = 0x92,
    RES_2_E_ = 0x93,
    RES_2_H_ = 0x94,
    RES_2_L_ = 0x95,
    RES_2_mem_HL_ = 0x96,
    RES_2_A_ = 0x97,
    RES_3_B_ = 0x98,
    RES_3_C_ = 0x99,
    RES_3_D_ = 0x9a,
    RES_3_E_ = 0x9b,
    RES_3_H_ = 0x9c,
    RES_3_L_ = 0x9d,
    RES_3_mem_HL_ = 0x9e,
    RES_3_A_ = 0x9f,
    RES_4_B_ = 0xa0,
    RES_4_C_ = 0xa1,
    RES_4_D_ = 0xa2,
    RES_4_E_ = 0xa3,
    RES_4_H_ = 0xa4,
    RES_4_L_ = 0xa5,
    RES_4_mem_HL_ = 0xa6,
    RES_4_A_ = 0xa7,
    RES_5_B_ = 0xa8,
    RES_5_C_ = 0xa9,
    RES_5_D_ = 0xaa,
    RES_5_E_ = 0xab,
    RES_5_H_ = 0xac,
    RES_5_L_ = 0xad,
    RES_5_mem_HL_ = 0xae,
    RES_5_A_ = 0xaf,
    RES_6_B_ = 0xb0,
    RES_6_C_ = 0xb1,
    RES_6_D_ = 0xb2,
    RES_6_E_ = 0xb3,
    RES_6_H_ = 0xb4,
    RES_6_L_ = 0xb5,
    RES_6_mem_HL_ = 0xb6,
    RES_6_A_ = 0xb7,
    RES_7_B_ = 0xb8,
    RES_7_C_ = 0xb9,
    RES_7_D_ = 0xba,
    RES_7_E_ = 0xbb,
    RES_7_H_ = 0xbc,
    RES_7_L_ = 0xbd,
    RES_7_mem_HL_ = 0xbe,
    RES_7_A_ = 0xbf,
    SET_0_B_ = 0xc0,
    SET_0_C_ = 0xc1,
    SET_0_D_ = 0xc2,
    SET_0_E_ = 0xc3,
    SET_0_H_ = 0xc4,
    SET_0_L_ = 0xc5,
    SET_0_mem_HL_ = 0xc6,
    SET_0_A_ = 0xc7,
    SET_1_B_ = 0xc8,
    SET_1_C_ = 0xc9,
    SET_1_D_ = 0xca,
    SET_1_E_ = 0xcb,
    SET_1_H_ = 0xcc,
    SET_1_L_ = 0xcd,
    SET_1_mem_HL_ = 0xce,
    SET_1_A_ = 0xcf,
    SET_2_B_ = 0xd0,
    SET_2_C_ = 0xd1,
    SET_2_D_ = 0xd2,
    SET_2_E_ = 0xd3,
    SET_2_H_ = 0xd4,
    SET_2_L_ = 0xd5,
    SET_2_mem_HL_ = 0xd6,
    SET_2_A_ = 0xd7,
    SET_3_B_ = 0xd8,
    SET_3_C_ = 0xd9,
    SET_3_D_ = 0xda,
    SET_3_E_ = 0xdb,
    SET_3_H_ = 0xdc,
    SET_3_L_ = 0xdd,
    SET_3_mem_HL_ = 0xde,
    SET_3_A_ = 0xdf,
    SET_4_B_ = 0xe0,
    SET_4_C_ = 0xe1,
    SET_4_D_ = 0xe2,
    SET_4_E_ = 0xe3,
    SET_4_H_ = 0xe4,
    SET_4_L_ = 0xe5,
    SET_4_mem_HL_ = 0xe6,
    SET_4_A_ = 0xe7,
    SET_5_B_ = 0xe8,
    SET_5_C_ = 0xe9,
    SET_5_D_ = 0xea,
    SET_5_E_ = 0xeb,
    SET_5_H_ = 0xec,
    SET_5_L_ = 0xed,
    SET_5_mem_HL_ = 0xee,
    SET_5_A_ = 0xef,
    SET_6_B_ = 0xf0,
    SET_6_C_ = 0xf1,
    SET_6_D_ = 0xf2,
    SET_6_E_ = 0xf3,
    SET_6_H_ = 0xf4,
    SET_6_L_ = 0xf5,
    SET_6_mem_HL_ = 0xf6,
    SET_6_A_ = 0xf7,
    SET_7_B_ = 0xf8,
    SET_7_C_ = 0xf9,
    SET_7_D_ = 0xfa,
    SET_7_E_ = 0xfb,
    SET_7_H_ = 0xfc,
    SET_7_L_ = 0xfd,
    SET_7_mem_HL_ = 0xfe,
    SET_7_A_ = 0xff    
};

enum JumpCode
{
    NZ,
    Z,
    NC,
    C
};

struct Instruction 
{
    const char * group;
    const char * code;
    int length;
    int cycount[2];
    void (*execute)();
    word pcCurr;

    void step()
    {
        regs.jmp = false;

        // If halted, increment clock cycles but don't execute any instruction
        if (halt) {
            //printf("Halted\n");
            cpuCycles = 4;
        } else {
            pcCurr = regs.PC;
            execute();
            
            // If the PC was modified (i.e. jmp or call), do not change it, default rule is to increment by instruction length
            if (pcCurr == regs.PC && !regs.jmp) regs.PC += length;
            // Use the "No jump" cycle count if it exists and no jump recorded, otherwise use the regular cycle count
            cpuCycles += (cycount[1] > 0 && !regs.jmp) ? cycount[1] : cycount[0];
        }

        addTraceLine(code, cpuCycles, regs.PC, regs.SP, mmu.PeekWord(regs.SP), length, rom_bnk_no);

        // Effect of calling IE is delayed by 1 instruction, check the counter here
        if (IMECounter > 0) {
            IMECounter -= 1;

            if (IMECounter == 0) {
                IMERegister = true;
            }
        }
    }
};

extern Instruction instTbl[256];

void initOpc();
void PUSH(word * a);
